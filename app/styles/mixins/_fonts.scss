@import '../settings/fonts';
$font-size-base: 16px;

/// Strip Unit
/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
///
/// @param {number} $num - Number to strip unit from.
///
/// @return The same number, sans unit.
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/// Convert to Rem
/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$rem-base` variable.
///
/// @param {number} $value - Pixel value to convert.
///
/// @return A number in rems, calculated based on the given value and the base pixel value.
@function convert-to-rem($value, $base-value: $font-size-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

/// Rem Calculator
/// Converts one or more pixel values into matching rem values. This function works a lot like `convert-to-rem`, except it can convert more than one value at once, which is useful when setting multiple values on a `margin` or `padding` property.
///
/// @param {number|list} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
///
/// @return A list of converted values.
@function rem-calc($values, $base-value: $font-size-base) {
  @if $base-value == null {
    $base-value: $font-size-base;
  }
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remvalues: ();
  @for $i from 1 through $max {
    $remvalues: append($remvalues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remvalues;
}

// Loop through $fonts map from settings/config
// and generate font styling for custom web fonts.
// e.g. @include font(open-sans, semibold);
//
// @param {string} $name Name of font within $font-map
// @param {string} $weight Mapped value of font weight
// @param {string} $fonts-map Map list of fonts
@mixin font($name, $weight: normal, $fonts-map: $fonts) {
  @if map-has-key($fonts-map, $name) {
    $font: map-get(map-get($fonts-map, $name), $weight);
    $font-family: map-get($font, family);
    $font-weight: map-get($font, weight);
    $font-fallback: map-get(map-get($fonts-map, $name), fallback);
    @if $font-fallback {
      font-family: $font-family, $font-fallback;
    }
    @else {
      font-family: $font-family;
    }
    font-weight: $font-weight;
  }
  @else {
    @error 'Font name is incorrect. Check $fonts-map map and font() @include for errors.';
  }
  @content;
}

// Turns font-size properties in to rem and a px fallback
//
// @param {string} $size the pixel unit
// @param {string} $line-height optional line-height pixel unit
@mixin font-size($size, $line-height: null) {
  font-size: $size;
  font-size: rem-calc($size);
  @if $line-height != null {
    line-height: rem-calc($line-height);
  }
  @content;
}

@function font-stack($font-family, $font-weight) {
  $font: map-get(map-get(map-get($fonts, $font-family), $font-weight), family);
  $font-fallback: map-get(map-get($fonts, $font-family), fallback);
  $font-stack: join($font, $font-fallback);
  @return $font-stack;
}
